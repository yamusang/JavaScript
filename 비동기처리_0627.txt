📌 동기	
한 작업이 끝날 때까지 다음 작업을 대기	
(라면을 끓이는 동안 TV 안 봄)
📌 비동기	
작업이 끝나길 기다리지 않고 다른 작업 먼저 수행	
(라면 끓이는 동안 TV 시청)

📌 비동기 처리 방식
네트워크 요청, 타이머, 파일 읽기 등 시간이 오래 걸리는 작업을 
처리하기 위한 핵심 개념입니다.

fetch, async/await, Promise 가 관련된 문법입니다.
비동기 함수에는 Promise 기반 O vs Promise 기반 X
          Promise 기반 O : fetch , Promise 기반 X : setTimeout,setInterval


✅ 1. Promise (ES6)

미래에 완료될 수 있는 비동기 작업의 결과를 담는 객체 (비동기 작업을 객체로 표현)
세 가지 상태를 가짐:
  - pending (대기)
  - fulfilled (성공)
  - rejected (실패)

🔹 사용 예시

const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("성공!");
    // 또는 reject("실패!");
  }, 1000);
});

myPromise
  .then(result => console.log(result)) // 성공 처리
  .catch(error => console.error(error)); // 실패 처리

🔍 then과 catch는 Promise 객체에서만 사용 가능한 메서드입니다.
1. then()
Promise가 성공(fulfilled)했을 때 실행할 콜백을 등록하는 메서드
반환값도 Promise이므로 체이닝(.then().then())도 가능

2. catch()
Promise가 실패(rejected)했을 때 실행할 콜백을 등록
.then(...).catch(...) 패턴으로 사용


✅ 2. fetch (내장 API)
브라우저에서 제공하는 비동기 HTTP 통신 함수
Promise 기반으로 동작

🔹 사용 예시

fetch("https://api.example.com/data")
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error("에러:", error));

🔹 Promise를 반환하므로 .then().catch() 와 함께 사용 가능



✅ 3. async/await (ES8)
Promise를 더 직관적이고 동기 방식처럼 보이도록 사용할 수 있게 해주는 문법
Promise를 반환하는 경우 async 함수 안에서만 await 사용 가능

🔹 사용 예시
async function loadData() {
  try {
    const response = await fetch("https://api.example.com/data");
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error("에러:", error);
  }
}
loadData();

🔹 await는 Promise가 처리될 때까지 기다림
   try/catch로 에러 핸들링
   가독성이 좋고, 동기 코드처럼 작성 가능

